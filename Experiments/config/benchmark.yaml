# Benchmark Configuration
# This file contains all configuration parameters for benchmarking the FMUKF model
# The configuration is organized into logical sections for data, benchmarking, and launcher

# Directory configuration for experiment outputs and temporary files

project_dir: ${pkgfile:fmukf}/../.. # Sneaky way to get the project directory
hydra_dir:   ${project_dir}/Experiments/temp/benchmarking/${now:%Y-%m-%d}/${now:%H-%M-%S}

defaults:
  - auth
  - dataset
  - _self_

hydra:
  job:
    chdir: true
  run:
    dir: ${hydra_dir}

io:
  dest_feather:       ${hydra_dir}/df_err.feather       # Feather file containing the error data for each estimate
  merged_h5:          ${hydra_dir}/benchmark.h5         # Final h5 file containing all merged predictions from all workers
  temp_h5_folder:     ${hydra_dir}/temp/h5_folder       # Temporary h5 files generated by each worker
  temp_stdout_folder: ${hydra_dir}/temp/stdout_files    # Temporary stdout files generated by each worker

data:
  data_set:  # Get Test Train split
    h5_path:       ${dataset.h5_dataset_path}
    seed:          ${dataset.seed}               # Determines train/val/test split
    h:             ${dataset.h}                  # Time in seconds between each time-step
    num_envs_val:  ${dataset.num_envs_val}       
    num_envs_test: ${dataset.num_envs_test}  
  
  # How many envs from test set to use for benchmarking
  num_sensor_repeats: 1      # How often to repeat each run with a different measurement seed
  num_max_envs:  100 #100          # Maximum number of envs/ ship configuration to run for
  num_max_trajs: 50 # 50          # Maximum number of trajectories to run for each env
  num_max_time_steps: 192 #196    # Number of time-steps to run for in each trajectory

# Initializes the random number generator for all workers
base_seed: 1219763    # (value randomly choosen)

# Globally set the stds of the sensor noise covariance (R), ie R = sensor_stds^2 (for observed states)
sensor_stds:  
  x:     0.003  # Position North (km)
  y:     0.003  # Position East (km)
  u:     0.05   # Velocity North (km/s)
  v:     0.01   # Velocity East (km/s)
  psi:   1.0    # Heading (deg)
  phi:   1.0    # Roll (deg)
  r:     0.01   # Yaw rate (deg/s)
  p:     0.1    # Pitch rate (deg/s)
  delta: 0.0    # Rudder angle (deg)  
  n:     0.0    # Shaft Velocity (rpm)

# Device configuration for model loading
device: auto  # Options: "cpu", "cuda", "auto" (auto detects CUDA availability)

global_ratios: # Determines the covariance matrices of Kalman Filter like methods relative to sensor_stds^2
  Q_fac:    0.1      # Ratio of process noise covariance (Q) to sensor_stds^2,   ie Q = 0.1 * R (for observed states)
  P0_fac:   1.0      # Ratio of initial state covariance (P0) to sensor_stds^2,  ie Q = 1.0 * R (for observed states)

sensors:
- key: ALL
  type: MaskedFuzzyStateSensor
  observed_states:  # Not observed: delta, n                      
    - x
    - 'y'
    - v
    - u
    - psi
    - r
    - phi
    - p

- key: GuessUV
  type: MaskedFuzzyStateSensor
  observed_states: # Not observed: delta, n, u, v
    - x
    - 'y'
    - psi
    - r
    - phi
    - p

estimators:

#Classical Baselines: 
  - key: BaseUKF #BaseUKF__Q${.Q_fac}__P${.P0_fac}__${.recompute_sigma_after_predict}
    type: BaseUKF
    P0_fac: ${global_ratios.P0_fac}
    Q_fac:  ${global_ratios.Q_fac}
    recompute_sigma_after_predict: false
    sigma_kwargs:
      alpha: 1.0
      beta:  0.0
      kappa: d
  
  - key:  OracleUKF #OracleUKF__Q${.Q_fac}__P${.P0_fac}__${.recompute_sigma_after_predict}
    type: OracleUKF
    P0_fac: ${global_ratios.P0_fac}
    Q_fac: ${global_ratios.Q_fac}
    recompute_sigma_after_predict: false
    sigma_kwargs:
      alpha: 1.0
      beta: 0.0
      kappa: d

  - key: CVUKF #CVUKF__Q${.Q_fac}__P${.P0_fac}__${.recompute_sigma_after_predict}
    type: CVUKF
    P0_fac: ${global_ratios.P0_fac}
    Q_fac: ${global_ratios.Q_fac}
    recompute_sigma_after_predict: false
    sigma_kwargs:
      alpha: 1.0
      beta: 0.0
      kappa: d

# End2End Estimators:
  - key: End2End #End2End__${.model_name}__${.integrator_method}
    type: End2End
    model_name: end2end_model
    ckpt_path: ${project_dir}/Experiments/data/${.model_name}.ckpt
    integrator_method: None
    max_context: 128
    device: ${device}  # Device for model loading: "cpu", "cuda", or "auto"

# FMUKF Estimators:
  - key: FMUKF_no_integrator #FMUKF__Q${.Q_fac}__P${.P0_fac}__${.integrator_method}__${.recompute_sigma_after_predict}__${.model_name}
    type: FMUKF
    P0_fac: ${global_ratios.P0_fac}
    Q_fac: ${global_ratios.Q_fac}
    recompute_sigma_after_predict: false
    sigma_kwargs:
      alpha: 1.0
      beta: 0.0
      kappa: d
    integrator_method: null
    model_name: fmukf_model
    ckpt_path: ${project_dir}/Experiments/data/${.model_name}.ckpt
    max_context: 64
    device: ${device}  # Device for model loading: "cpu", "cuda", or "auto"

  - key: FMUKF_with_integrator #FMUKF__Q${.Q_fac}__P${.P0_fac}__${.integrator_method}__${.recompute_sigma_after_predict}__${.model_name}
    type: FMUKF
    P0_fac: ${global_ratios.P0_fac}
    Q_fac: ${global_ratios.Q_fac}
    recompute_sigma_after_predict: false
    sigma_kwargs:
      alpha: 1.0
      beta: 0.0
      kappa: d
    integrator_method: midpoint
    model_name: fmukf_model
    ckpt_path: ${project_dir}/Experiments/data/${.model_name}.ckpt
    max_context: 64
    device: ${device}  # Device for model loading: "cpu", "cuda", or "auto"

error_handling:
  estimators:  # For each estimator method
    timeout: 120      # How many seconds before assume hung and killed
    num_retries: 2    # How many times to retry the estimator
    delay: 0          # How many seconds to wait between retries
  
  h5: # For loading and saving the h5 file
    timeout: 10
    num_retries: 2
    delay: 5

# Launcher configuration
launcher:
  type: local  # Options: "local", "slurm"
  
  local:
    num_workers: 8  # Number of parallel worker processes (set to 1 for single-process execution)
  
  slurm:
    num_jobs: 600
    num_tasks_per_job: 1
    cpus_per_task: 1         
    partition: c23ms
    account: ${auth.slurm.account}
    time: 04:00:00
    venv_activate_script: /path/to/your/venv/activate.sh  # Update this path for your cluster
